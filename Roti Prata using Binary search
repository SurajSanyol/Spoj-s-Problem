#include <iostream>
#include<vector>
#include<algorithm>
using namespace std;

bool ispossibleSolution(vector<int>cookRank, int nP, int mid)
{
   int currP=0; //initial cooked Prata Count
   for(int i=0;i<cookRank.size();i++)
   {
    int R=cookRank[i],j=1;
    int timeTaken=0;

    while(true)
    {
      if(timeTaken+j*R<=mid)
      {
        currP++;
        timeTaken+=j*R;
        j++;
      }
      else{
        break;
      }
    }
    if(currP>=nP)
    {
      return true;
    }
   }
   
  return false;
 
}

 int minTimeToCompleteOrder(vector< int>cookRank, int nP)
{
   int start=0;
  int higestRank =*max_element(cookRank.begin(),cookRank.end());
  int end=higestRank*(nP*(nP+1)/2);
  int ans =-1;
  while(start<=end)
  {
     int mid=start+(end-start)/2;
    if(ispossibleSolution(cookRank,nP,mid))
    {
      ans=mid;
      end=mid-1;
      
    }
    else{
      start=mid+1;
    }
  }
  return ans;
}

int main() {
   int T;
  cin>>T;
  while(T--)
  {
    int nP,nC;
    cin>>nP>>nC;
    vector< int>cookRank;
    while(nC--)
    {
    int R;
    cin>>R;
    cookRank.push_back(R);

    }

  cout<<minTimeToCompleteOrder(cookRank,nP)<<endl;
  }
  return 0;
}
